# # Advanced example with tagging and CloudWatch
# - ec2:
#     key_name: mykey
#     group: databases
#     instance_type: t2.micro
#     image: ami-123456
#     wait: yes
#     wait_timeout: 500
#     count: 5
#     instance_tags:
#        db: postgres
#     monitoring: yes
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes

# # Single instance with additional IOPS volume from snapshot and volume delete on termination
# - ec2:
#     key_name: mykey
#     group: webserver
#     instance_type: c3.medium
#     image: ami-123456
#     wait: yes
#     wait_timeout: 500
#     volumes:
#       - device_name: /dev/sdb
#         snapshot: snap-abcdef12
#         volume_type: io1
#         iops: 1000
#         volume_size: 100
#         delete_on_termination: true
#     monitoring: yes
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes

# # Single instance with ssd gp2 root volume
# - ec2:
#     key_name: mykey
#     group: webserver
#     instance_type: c3.medium
#     image: ami-123456
#     wait: yes
#     wait_timeout: 500
#     volumes:
#       - device_name: /dev/xvda
#         volume_type: gp2
#         volume_size: 8
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes
#     count_tag:
#       Name: dbserver
#     exact_count: 1

# # Multiple groups example
# - ec2:
#     key_name: mykey
#     group: ['databases', 'internal-services', 'sshable', 'and-so-forth']
#     instance_type: m1.large
#     image: ami-6e649707
#     wait: yes
#     wait_timeout: 500
#     count: 5
#     instance_tags:
#         db: postgres
#     monitoring: yes
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes

# # Multiple instances with additional volume from snapshot
# - ec2:
#     key_name: mykey
#     group: webserver
#     instance_type: m1.large
#     image: ami-6e649707
#     wait: yes
#     wait_timeout: 500
#     count: 5
#     volumes:
#     - device_name: /dev/sdb
#       snapshot: snap-abcdef12
#       volume_size: 10
#     monitoring: yes
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes

# # Dedicated tenancy example
# - local_action:
#     module: ec2
#     assign_public_ip: yes
#     group_id: sg-1dc53f72
#     key_name: mykey
#     image: ami-6e649707
#     instance_type: m1.small
#     tenancy: dedicated
#     vpc_subnet_id: subnet-29e63245
#     wait: yes

# # Spot instance example
# - ec2:
#     spot_price: 0.24
#     spot_wait_timeout: 600
#     keypair: mykey
#     group_id: sg-1dc53f72
#     instance_type: m1.small
#     image: ami-6e649707
#     wait: yes
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes
#     spot_launch_group: report_generators
#     instance_initiated_shutdown_behavior: terminate


## ATTACH NETWORK INTERFACE ENDPOINT WITH IP TO INTERFACE OF INSTANCE
# # Examples using pre-existing network interfaces
# - ec2:
#     key_name: mykey
#     instance_type: t2.small
#     image: ami-f005ba11
#     network_interface: eni-deadbeef

# - ec2:
#     key_name: mykey
#     instance_type: t2.small
#     image: ami-f005ba11
#     network_interfaces: ['eni-deadbeef', 'eni-5ca1ab1e']

# Launch instances, runs some tasks
# and then terminate them

# - name: Create a sandbox instance
#   hosts: localhost
#   gather_facts: False
#   vars:
#     keypair: my_keypair
#     instance_type: m1.small
#     security_group: my_securitygroup
#     image: my_ami_id
#     region: us-east-1
#   tasks:
#     - name: Launch instance
#       ec2:
#          key_name: "{{ keypair }}"
#          group: "{{ security_group }}"
#          instance_type: "{{ instance_type }}"
#          image: "{{ image }}"
#          wait: true
#          region: "{{ region }}"
#          vpc_subnet_id: subnet-29e63245
#          assign_public_ip: yes
#       register: ec2

#     - name: Add new instance to host group
#       add_host:
#         hostname: "{{ item.public_ip }}"
#         groupname: launched
#       loop: "{{ ec2.instances }}"

#     - name: Wait for SSH to come up
#       delegate_to: "{{ item.public_dns_name }}"
#       wait_for_connection:
#         delay: 60
#         timeout: 320
#       loop: "{{ ec2.instances }}"

# - name: Configure instance(s)
#   hosts: launched
#   become: True
#   gather_facts: True
#   roles:
#     - my_awesome_role
#     - my_awesome_test

# - name: Terminate instances
#   hosts: localhost
#   tasks:
#     - name: Terminate instances that were previously launched
#       ec2:
#         state: 'absent'
#         instance_ids: '{{ ec2.instance_ids }}'

# Start a few existing instances, run some tasks
# and stop the instances

# - name: Start sandbox instances
#   hosts: localhost
#   gather_facts: false
#   vars:
#     instance_ids:
#       - 'i-xxxxxx'
#       - 'i-xxxxxx'
#       - 'i-xxxxxx'
#     region: us-east-1
#   tasks:
#     - name: Start the sandbox instances
#       ec2:
#         instance_ids: '{{ instance_ids }}'
#         region: '{{ region }}'
#         state: running
#         wait: True
#         vpc_subnet_id: subnet-29e63245
#         assign_public_ip: yes
#   roles:
#     - do_neat_stuff
#     - do_more_neat_stuff

# - name: Stop sandbox instances
#   hosts: localhost
#   gather_facts: false
#   vars:
#     instance_ids:
#       - 'i-xxxxxx'
#       - 'i-xxxxxx'
#       - 'i-xxxxxx'
#     region: us-east-1
#   tasks:
#     - name: Stop the sandbox instances
#       ec2:
#         instance_ids: '{{ instance_ids }}'
#         region: '{{ region }}'
#         state: stopped
#         wait: True
#         vpc_subnet_id: subnet-29e63245
#         assign_public_ip: yes

#
# Start stopped instances specified by tag
#
# - local_action:
#     module: ec2
#     instance_tags:
#         Name: ExtraPower
#     state: running

#
# Restart instances specified by tag
#
# - local_action:
#     module: ec2
#     instance_tags:
#         Name: ExtraPower
#     state: restarted

#
# Enforce that 5 instances with a tag "foo" are running
# (Highly recommended!)
#

###################### validate_ng.yml TODO

# - ec2:
#     key_name: mykey
#     instance_type: c1.medium
#     image: ami-40603AD1
#     wait: yes
#     group: webserver
#     instance_tags:
#         foo: bar
#     exact_count: 5
#     count_tag: foo
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes

#
# Enforce that 5 running instances named "database" with a "dbtype" of "postgres"
#

# - ec2:
#     key_name: mykey
#     instance_type: c1.medium
#     image: ami-40603AD1
#     wait: yes
#     group: webserver
#     instance_tags:
#         Name: database
#         dbtype: postgres
#     exact_count: 5
#     count_tag:
#         Name: database
#         dbtype: postgres
#     vpc_subnet_id: subnet-29e63245
#     assign_public_ip: yes

# #
# # count_tag complex argument examples
# #

#     # instances with tag foo
# - ec2:
#     count_tag:
#         foo:

#     # instances with tag foo=bar
# - ec2:
#     count_tag:
#         foo: bar

#     # instances with tags foo=bar & baz
# - ec2:
#     count_tag:
#         foo: bar
#         baz:

#     # instances with tags foo & bar & baz=bang
# - ec2:
#     count_tag:
#         - foo
#         - bar
#         - baz: bang
