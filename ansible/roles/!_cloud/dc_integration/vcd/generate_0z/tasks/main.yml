
# - name: build list of admin user names
#   set_fact: 
#     admin_list: |
#       {% for item in cloud_bootstrap.servers | dict2items %}
#       {{ item }},
#       {% endfor %}

# - debug: 
#     msg: "{{ cloud_bootstrap.servers.keys() }}"

- name: Set fact newlist item from create_instance_result.results
  set_fact:
    newlist: "{{ item }}"
  with_items: |
    "{% for dict_item in create_instance_result.results %}{% for k,v in dict_item.items() %}{% if k == 'instances' %}{{ v }}{% endif %}{% endfor %}{% endfor %}"
  when: destroy_instances is not defined

- name: set_fact newlist
  set_fact:
    new_pre: "{{ newlist | replace('\"[', '') | replace(']\"', '') | replace('\\u', '') }}"
  when: destroy_instances is not defined

- name: Debug new_pre 
  debug:
    msg: "{{ new_pre | replace('\\u', '') }}"
  when: destroy_instances is not defined

- name: set_fact new_p
  set_fact:
    new_p: "{{ new_pre | replace('\\u', '') }}"
  when: destroy_instances is not defined

- name: Debug new_p 
  set_fact:
    new_pp: "{{ new_p | replace('][', ', ') }}"
  when: destroy_instances is not defined

- name: Debug new_pp 
  debug:
    msg: "{{ new_pp }}"
  when: destroy_instances is not defined

- name: Set authorized ssh key, extracting just that data from 'users'
  debug:
    msg: "{{ item.host_name }} {{ item.public_ip_address }} {{ item.private_ip_address }}"
  with_items:
      - "{{ new_pp }}"
  when: destroy_instances is not defined

- name: Copy 0z inventory to work ignored copy for generate the local inventory
  copy:
    src: "inventories/0z-cloud/products/types/!_alicloud/{{ ansible_product }}/{{ ansible_environment }}/bootstrap_vms/group_vars/all.yml"
    dest: "inventories/0z-cloud/products/types/!_alicloud/{{ ansible_product }}/{{ ansible_environment }}/bootstrap_vms/group_vars/.alicloud.cloud.run.yml"
  when: destroy_instances is not defined

- name: Line public_ip_address in file change for dynamic inventory
  lineinfile:
    path: inventories/0z-cloud/products/types/!_alicloud/{{ ansible_product }}/{{ ansible_environment }}/bootstrap_vms/group_vars/.alicloud.cloud.run.yml
    regexp: '^(.*\ip: "{{ item.host_name }}_public_ip_address_REPLACED")'
    line: '        ip: "{{ item.public_ip_address }}"'
  with_items: 
       - "{{ new_pp }}"
  when: destroy_instances is not defined

- name: Line private_ip_address in file change for dynamic inventory
  lineinfile:
    path: inventories/0z-cloud/products/types/!_alicloud/{{ ansible_product }}/{{ ansible_environment }}/bootstrap_vms/group_vars/.alicloud.cloud.run.yml
    regexp: '^(.*\_ip: "{{ item.host_name }}_private_ip_address_REPLACED")'
    line: '            second_ip: "{{ item.private_ip_address }}"'
  with_items: 
       - "{{ new_pp }}"
  when: destroy_instances is not defined





# - name: Check an ECS instance VMs on Group alive and current
#   ali_instance:
#     security_groups: "{{ createsgeresult.group.group_id }}"
#     anycloud_landscape_region: "eu-west-1"
#     image: '{{ item.value.anycloud_vm_template_name }}'
#     type: '{{ item.value.anycloud_vm_performance_configuration }}'
#     instance_name: '{{ item.value.name }}'
#     description: '{{ item.value.name }}'
#     host_name: '{{ item.value.name }}'
#     password: '{{ anycloud_vm_access_pass }}'
#     count: '{{ anycloud_one_instance_duplicates_count }}'
#     anycloud_internet_charge_type: "PayByTraffic"
#     instance_charge_type: "PostPaid"
#     anycloud_allocate_public_ip: '{{ anycloud_allocate_public_ip }}'
#     anycloud_defaults_max_bandwidth_in: 10
#     anycloud_defaults_max_bandwidth_out: 10
#     anycloud_communication_device_id: '{{ anycloud_communication_device_id }}'
#     anycloud_api_secret_key: "{{ anycloud_api_secret_key }}"
#     alicloud_access_key: "{{ alicloud_access_key }}"
#   register: create_instance_result
#   with_dict: "{{ cloud_bootstrap.servers }}"

# - debug: var=create_instance_result

# - name: debug
#   debug: "{{ key }}"
#   with_dict: create_instance_result.results

# - name: Get all VMs on Group
#   ali_instance_facts:
#     instance_names: 
#           - "{{ item.value.name }}"
#     anycloud_api_secret_key: "{{ anycloud_api_secret_key }}"
#     alicloud_access_key: "{{ alicloud_access_key }}"
#     anycloud_landscape_region: "eu-west-1"
#   register: instances_by_ids_{{ item.value.name }}
#   with_dict: "{{ cloud_bootstrap.servers }}"

# - name: Debug facts
#   debug: 
#     msg: "{{ instances_by_ids_{{ item.value.name }} }}"
#   with_dict: "{{ cloud_bootstrap.servers }}"


# - name: Debug facts

#   debug: 
#     msg: |
#       "{% for dict_item in instances_by_ids_{{ item.value.name }} %}{% for k,v in dict_item.items() %}{% if k == 'instances' %}
#       {{ v | safe }}
#       {% endif %}{% endfor %}
#       {% endfor %}"
#   with_dict: "{{ cloud_bootstrap.servers }}"

# - name: Debug facts
#   debug: 
#     msg: |
#       "{% for dict_item in instances_by_ids.results %}{% for key,value in dict_item.items() %}{% if key == 'instances' %}
#       {% if value.network_interfaces %}
#             {{ value | safe }}
#       {% endif %}
#       {% endif %}{% endfor %}
#       {% endfor %}"

#    #   admin_list: "{{ admin_accounts | selectattr('state', 'equalto', 'present') | map(attribute='name') | join(', ') }}"


# # - name: Replace in file public ip