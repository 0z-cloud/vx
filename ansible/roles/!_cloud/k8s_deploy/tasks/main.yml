
    - name: INCLUDE | Variables passed on-fly from CI
      include_vars: ../../../.local/ci_version.yml

    - name: INCLUDE | Variables passed on-fly from CI about tags
      include_vars: ../../../.local/current_tags.yml

    - name: PREPARE | Include environment variables for environment cloud
      include_vars: "{{ inventory_dir }}/group_vars/dns/{{ HOSTS | default('cloud-bind-frontend-dns') }}/{{ HOSTS | default('cloud-bind-frontend-dns') }}.yml"

    - name: PREPARE | Include environment variables for applications
      include_vars: "group_vars/!_Applications_Core/{{ ANSIBLE_APPLICATION_TYPE }}/{{ ANSIBLE_APPLICATION_TYPE }}_folders_map.yml"

    - name: PREPARE | Include environment variables for applications
      include_vars: "group_vars/!_Applications_Core/{{ ANSIBLE_APPLICATION_TYPE }}/{{ ANSIBLE_APPLICATION_TYPE }}_settings_map.yml"

    - name: Merge dictionaries with compare and stay only with one name of key
      set_fact:
        installed_app_settings: >
          {{ (installed_app_settings|default([])) + [{item: all_services_remap_docker_compose_generate[item]}] }}
      with_items: "{{ all_services_settings_map }}"

    # - debug:
    #     var: installed_app_settings

    - name: DEBUG | show items in dict
      debug:
        msg: "{{ item }}"
      with_items: "{{ all_services_settings_map }}"

    - name: DEBUG | show items in dict about spec tags
      debug:
        msg: "{{ lookup('vars', 'passed_ci_docker_tag_' + item) }}"
      with_items: "{{ all_services_settings_map }}"

    - name: PREPARE | Create the directories
      file:
        path: "{{ item.value }}"
        state: directory
        mode: 0755
      with_dict: "{{ all_services_location_map.directories | default({}) }}"

    - name: PREPARE | Create directories for services
      file:
        path: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}"
        state: directory
        mode: 0755
      with_dict: "{{ installed_app_settings }}"

    - name: PREPARE | Template the service template for k8s deploy
      template:
        src: "test.yml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/{{ item.key }}.yml"
      with_dict: "{{ installed_app_settings }}"

    - name: PREPARE | Template ConfigMap.yaml for service to k8s deploy
      template:
        src: "ConfigMap.yaml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/ConfigMap.{{ item.key }}.yaml"
      with_dict: "{{ installed_app_settings }}"

    - name: PREPARE | Template Service.yaml for service to k8s deploy
      template:
        src: "Service.yaml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/Service.{{ item.key }}.yaml"
      with_dict: "{{ installed_app_settings }}"

    - name: PREPARE | Template Deployment.yaml for service to k8s deploy
      template:
        src: "Deployment.yaml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/Deployment.{{ item.key }}.yaml"
      with_dict: "{{ installed_app_settings }}"

    - name: PREPARE | Template Ingress.yaml for service to k8s deploy
      template:
        src: "Ingress.yaml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/Ingress.{{ item.key }}.yaml"
      with_dict: "{{ installed_app_settings }}"
      when: item.value.k8s_container_type == "ruby" or item.value.k8s_container_type == "service"

    - name: PREPARE | Template PersistentVolumeClaim.yaml.yaml for service to k8s deploy
      template:
        src: "PersistentVolumeClaim.yaml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/PersistentVolumeClaim.{{ item.key }}.yaml"
      with_dict: "{{ installed_app_settings }}"
      when: item.value.k8s_storage_space_size is defined

    - name: PREPARE | Template Secret.yaml for service to k8s deploy
      template:
        src: "Secret.yaml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/Secret.{{ item.key }}.yaml"
      with_dict: "{{ installed_app_settings }}"
      when: item.value.k8s_container_type == "ruby" or item.value.k8s_container_type == "service"

    - name: PREPARE | Template Chart.yaml for service to k8s deploy
      template:
        src: "Chart.yaml.j2"
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/Chart.{{ item.key }}.yaml"
      with_dict: "{{ installed_app_settings }}"

    - name: Get the array to update
      shell: "ls -la {{ all_services_location_map.directories.k8s_storage_helm }}/{{ item.key }}/ | awk '{print $9}' | tail -n +4"
      register: "update_array_data"
      with_dict: "{{ installed_app_settings }}"
  
    - name: Create array reversed
      set_fact: '{{ item.stdout_lines[0] | regex_replace("^.*?[\s.]", "") | regex_replace("([\s.])yaml", "") }}_list_to_update=[]'
      with_items: "{{ update_array_data.results }}"
  
    - name: Add updated files to each array
      set_fact: '{{ item.stdout_lines[0] | regex_replace("^.*?[\s.]", "") | regex_replace("([\s.])yaml", "") }}_list_to_update={{ item.stdout_lines | join(", ") }}'
      with_items: "{{ update_array_data.results }}"

    - name: Debug the dynamic facts
      debug:
        var: '{{ item.stdout_lines[0] | regex_replace("^.*?[\s.]", "") | regex_replace("([\s.])yaml", "") }}_list_to_update'
      with_items: "{{ update_array_data.results }}"

    - name: Do a template way
      template:
        src: deploy.sh.j2
        dest: "{{ all_services_location_map.directories.k8s_storage_helm }}/deploy.sh"
        mode: 755