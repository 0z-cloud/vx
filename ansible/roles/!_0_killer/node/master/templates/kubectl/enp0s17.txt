enp0s17:
      dhcp4: no
      dhcp6: no
      addresses:
        - 185.40.28.83/24
      # GW FOR FRONTEND AND BALANCER AS DEFAULT (DMZ to INTERNET)
      gateway4: "185.40.28.81"

        # addresses:
        #   - 185.40.28.83

    enp0s8:
      dhcp4: no
      dhcp6: no
      addresses:
        - 172.16.50.200/24

kubeadm join vortex.vless.ru:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:9c2f881aef4cac9c8f918878c2736313d905e3a4920558d4b246eb1fb9c8fad4 --control-plane --certificate-key e6c302f6837a3d857a828e2532ce84304b1ab27e84ba80e49d44fdb6a90fd76d


kubeadm join vortex.vless.ru:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:9c2f881aef4cac9c8f918878c2736313d905e3a4920558d4b246eb1fb9c8fad4


iptables --flush
iptables -t nat -A POSTROUTING -o enp0s8 -j MASQUERADE

mkdir -p /root/.kube
cp -i /etc/kubernetes/admin.conf /root/.kube/config

/etc/cni/net.d
Mar 30 02:23:29 vortex-node-05-production kubelet[8935]: E0330 02:23:29.074918    8935 kubelet.go:2267] node "vortex-node-05-production" not found

kubeadm init phase --config /etc/kubernetes/kube/cl_one.yml upload-certs --upload-certs

apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
bootstrapTokens:
  - token: wwq72l.psibd4h36hrwf409
    description: kubespray kubeadm bootstrap token
    ttl: 24h
localAPIEndpoint:
  advertiseAddress: 10.32.40.156
  bindPort: 6443
nodeRegistration:
  name: vortex-node-05-production
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
  criSocket: /var/run/dockershim.sock
  kubeletExtraArgs:
    cloud-provider: external
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
clusterName: main_k8_cluster
etcd:
  external:
      endpoints:
      - https://10.32.40.155:2379
      - https://10.32.40.154:2379
      - https://10.32.40.156:2379
      caFile: /opt/ca/pki/ca.pem
      certFile: /opt/ca/pki/etcd.pem
      keyFile: /opt/ca/pki/etcd.key
dns:
  type: CoreDNS
  imageRepository: k8s.gcr.io
  imageTag: "1.6.7"
networking:
  dnsDomain: vless.ru
  serviceSubnet: 10.233.0.0/18
  podSubnet: 10.233.64.0/18
kubernetesVersion: v1.18.0
controlPlaneEndpoint: vortex.vless.ru:6443
certificatesDir: /opt/ca/pki
imageRepository: k8s.gcr.io
apiServer:
  extraArgs:
    authorization-mode: ""
    bind-address: 0.0.0.0
    insecure-bind-address: 127.0.0.1
    insecure-port: "8080"
    enable-admission-plugins: PodSecurityPolicy,AlwaysPullImages,DefaultStorageClass
    disable-admission-plugins: SecurityContextDeny
    apiserver-count: "3"
    endpoint-reconciler-type: "lease"
    service-node-port-range: "30000-32767"
    kubelet-preferred-address-types: 'InternalDNS,InternalIP,Hostname,ExternalDNS,ExternalIP'
    profiling: "false"
    request-timeout: "1m0s"
    enable-aggregator-routing: "false"
    basic-auth-file: /opt/ca/kube/known_users.csv
    token-auth-file: /opt/ca/kube/known_tokens.csv
    authentication-token-webhook-config-file: /opt/ca/kube/webhook-token-auth-config.yaml
    encryption-provider-config: /opt/ca/kube/secrets_encryption.yaml
    storage-backend: "etcd3"
    runtime-config: ""
    allow-privileged: "true"
    audit-log-path: "/opt/ca/kube/logs/"
    audit-log-maxage: "30"
    audit-log-maxbackup: "1"
    audit-log-maxsize: "100"
    audit-policy-file: /opt/ca/kube/audit_policy/apiserver-audit-policy.yaml
    feature-gates: ""
  extraVolumes:
  - name: basic-auth-config
    hostPath: /opt/ca/kube/
    mountPath: /opt/ca/kube/
  - name: webhook-token-auth-config
    hostPath: /opt/ca/kube/webhook-token-auth-config.yaml
    mountPath: /opt/ca/kube/webhook-token-auth-config.yaml
  - name: audit-policy
    hostPath: /opt/ca/kube/audit_policy/
    mountPath: /opt/ca/kube/audit_policy/
  - name: auditk8-log
    hostPath: /opt/ca/kube/logs/
    mountPath: /opt/ca/kube/logs/
    readOnly: false
  - name: usr-share-ca-certificates
    hostPath: /usr/share/ca-certificates
    mountPath: /usr/share/ca-certificates
    readOnly: true
  - name: usr-share-ca-certificates
    hostPath: /usr/share/ca-certificates
    mountPath: /usr/share/ca-certificates
    readOnly: true
  certSANs:
  - "kubernetes"
  - "kubernetes.default"
  - "kubernetes.default.svc"
  - "kubernetes.default.svc.vless.ru"
  - "10.32.40.101"
  - "10.32.40.100"
  - "localhost"
  - "127.0.0.1"
  - "vortex.vless.ru"
  - "10.32.40.155"
  - "10.32.40.156"
  - "10.32.40.154"
  - "vortex-node-05-production"
  - "vortex-node-04-production"
  - "vortex-node-06-production"
  timeoutForControlPlane: "5m0s"
controllerManager:
  extraArgs:
    node-monitor-grace-period: "40s"
    node-monitor-period: "5s"
    pod-eviction-timeout: "5m0s"
    node-cidr-mask-size: "24"
    profiling: "false"
    terminated-pod-gc-threshold: "12500"
    bind-address: "0.0.0.0"
    feature-gates: ""
scheduler:
  extraArgs:
    bind-address: "0.0.0.0"
    feature-gates: ""
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
bindAddress: "0.0.0.0"
clientConnection:
 acceptContentTypes: ""
 burst: 10
 contentType: "application/vnd.kubernetes.protobuf"
 kubeconfig: ""
 qps: 5
clusterCIDR: "10.233.64.0/18"
configSyncPeriod: "15m0s"
conntrack:
 maxPerCore: 32768
 min: 131072
 tcpCloseWaitTimeout: "1h0m0s"
 tcpEstablishedTimeout: "24h0m0s"
enableProfiling: false
healthzBindAddress: "0.0.0.0:10256"
hostnameOverride: "vortex-node-05-production"
iptables:
 masqueradeAll: true
 masqueradeBit: 14
 minSyncPeriod: "0s"
 syncPeriod: "30s"
ipvs:
 excludeCIDRs: []
 minSyncPeriod: "0s"
 scheduler: "rr"
 syncPeriod: "30s"
 strictARP: false
metricsBindAddress: "127.0.0.1:10249"
mode: "ipvs"
nodePortAddresses:
- "10.32.0.0/16"
oomScoreAdj: -999
portRange: ""
udpIdleTimeout: "250ms"
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
clusterDNS:
- "10.233.0.10"


###

apt install libapache2-mod-php libapache2-mod-php7.0 libapache2-mod-php7.2 php php-bz2 php-cli php-common php-gd php-gettext php-mbstring php-mcrypt php-mysql php-pear php-php-gettext php-phpseclib php-soap php-tcpdf php-xml php-zip php7.0-cli php7.0-common php7.0-gd php7.0-json php7.0-mbstring php7.0-mcrypt php7.0-mysql php7.0-opcache php7.0-readline php7.0-soap php7.0-xml php7.2 php7.2-bz2 php7.2-cli php7.2-common php7.2-gd php7.2-json php7.2-mbstring php7.2-mysql php7.2-opcache php7.2-readline php7.2-soap php7.2-xml php7.2-zip phpmyadmin


kubeadm init --config=/etc/kubernetes/kube/cl_one.yml --ignore-preflight-errors=all --skip-phases=addon/coredns --upload-certs


apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
bootstrapTokens:
- token: {{ k8_bootstrap_kubeadm_token }}
  description: "kubespray kubeadm bootstrap token"
  ttl: "24h"
localAPIEndpoint:
  advertiseAddress: {{ hostvars[inventory_hostname]['second_ip'] }}
  bindPort: {{ K8S_CLUSTER_LISTEN_PORT }}
{% if kubeadm_certificate_key is defined %}
certificateKey: {{ kubeadm_certificate_key }}
{% endif %}
nodeRegistration:
  name: {{ hostvars[inventory_hostname]['ansible_nodename'] }}
{% if inventory_hostname in groups['kubernetes-master'] and inventory_hostname not in groups['kubernetes-worker'] %}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
{% else %}
  taints: []
{% endif %}
  criSocket: "/var/run/dockershim.sock" {# {{ cri_socket }} #}
{% if cloud_provider is defined and cloud_provider in ["external"] %}
  kubeletExtraArgs:
    cloud-provider: external
{% endif %}
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
clusterName: {{ K8S_CLUSTER_NAME }}
etcd:
  external:
      endpoints: {% for host in groups['kubernetes-master'] %}{% raw %}
      - https://{% endraw %}{{ hostvars[host]['second_ip'] }}{% raw %}:{% endraw %}{{ K8S_CLUSTER_LISTEN_PORT_2379 }}{% raw %}
      {% endraw %}{% endfor %}
      caFile: /opt/ca/pki/ca.pem
      certFile: /opt/ca/pki/etcd.pem
      keyFile: /opt/ca/pki/etcd.key
dns:
  type: CoreDNS
  imageRepository: k8s.gcr.io
  imageTag: "1.6.7"
networking:
  dnsDomain: {{ public_consul_domain }}
  serviceSubnet: {{ SERVICE_NETWORK_CIDR }}
  podSubnet: {{ POD_NETWORK_CIDR }}{% raw %}
kubernetesVersion: v1.18.0
controlPlaneEndpoint: vortex.{% endraw %}{{ public_consul_domain }}{% raw %}:{% endraw %}{{ K8S_CLUSTER_LISTEN_PORT }}
certificatesDir: /opt/ca/pki
imageRepository: k8s.gcr.io
apiServer:
  extraArgs:
    authorization-mode: []
    bind-address: 0.0.0.0
    insecure-bind-address: 127.0.0.1
    insecure-port: 8080
    enable-admission-plugins: PodSecurityPolicy,AlwaysPullImages,DefaultStorageClass
    disable-admission-plugins: SecurityContextDeny
    apiserver-count: 3
    endpoint-reconciler-type: lease
{% if etcd_events_cluster_enabled %}
    etcd-servers-overrides: "/events#{{ etcd_events_access_addresses_semicolon }}"
{% endif %}
    service-node-port-range: 30000-32767
    kubelet-preferred-address-types: 'InternalDNS,InternalIP,Hostname,ExternalDNS,ExternalIP'
    profiling: false
    request-timeout: "1m0s"
    enable-aggregator-routing: false
    basic-auth-file: /opt/ca/kube/known_users.csv
    token-auth-file: /opt/ca/kube/known_tokens.csv
    authentication-token-webhook-config-file: /opt/ca/kube/webhook-token-auth-config.yaml
    encryption-provider-config: /opt/ca/kube/secrets_encryption.yaml
    storage-backend: etcd3
    runtime-config: []
    allow-privileged: "true"
    audit-log-path: "/opt/ca/kube/logs/"
    audit-log-maxage: "30"
    audit-log-maxbackup: "1"
    audit-log-maxsize: "100"
    audit-policy-file: /opt/ca/kube/audit_policy/apiserver-audit-policy.yaml
    feature-gates: []
  extraVolumes:
  - name: basic-auth-config
    hostPath: /opt/ca/kube/
    mountPath: /opt/ca/kube/
  - name: token-auth-config
    hostPath: /opt/ca/kube/
    mountPath: /opt/ca/kube/
  - name: webhook-token-auth-config
    hostPath: /opt/ca/kube/webhook-token-auth-config.yaml
    mountPath: /opt/ca/kube//webhook-token-auth-config.yaml
  - name: audit-policy
    hostPath: /opt/ca/kube/audit_policy/
    mountPath: /opt/ca/kube/audit_policy/
  - name: auditk8.log
    hostPath: /opt/ca/kube/logs/
    mountPath: /opt/ca/kube/logs/
    readOnly: false
  - name: usr-share-ca-certificates
    hostPath: /usr/share/ca-certificates
    mountPath: /usr/share/ca-certificates
    readOnly: true
  - name: usr-share-ca-certificates
    hostPath: /usr/share/ca-certificates
    mountPath: /usr/share/ca-certificates
    readOnly: true
  certSANs:
  - "kubernetes"
  - "kubernetes.default"
  - "kubernetes.default.svc"
  - "kubernetes.default.svc.{{ dns_domain }}"
  - "{{ CALICO_ETCD_CLUSTER_IP }}"
  - "{{ K8S_CLUSTER_ADDRESS }}"
  - "localhost"
  - "127.0.0.1"
  - "vortex.{{ public_consul_domain }}"
  - "10.32.40.155"
  - "10.32.40.156"
  - "10.32.40.154"
  - "vortex-node-05-production"
  - "vortex-node-04-production"
  - "vortex-node-06-production"
  timeoutForControlPlane: "5m0s"
controllerManager:
  extraArgs:
    node-monitor-grace-period: "40s"
    node-monitor-period: "5s"
    pod-eviction-timeout: "5m0s"
    node-cidr-mask-size: "24"
    profiling: false
    terminated-pod-gc-threshold: "12500"
    bind-address: 0.0.0.0
    feature-gates: []
{% if kube_network_plugin is defined and kube_network_plugin not in ["cloud"] %}
    configure-cloud-routes: "false"
{% endif %}
scheduler:
  extraArgs:
    bind-address: 0.0.0.0
    feature-gates: []

---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
bindAddress: 0.0.0.0
clientConnection:
 acceptContentTypes: ''
 burst: "10"
 contentType: application/vnd.kubernetes.protobuf
 kubeconfig: ''
 qps: "5"
clusterCIDR: {{ POD_NETWORK_CIDR }}
configSyncPeriod: "15m0s"
conntrack:
 maxPerCore: "32768"
 min: "131072"
 tcpCloseWaitTimeout: "1h0m0s"
 tcpEstablishedTimeout: "24h0m0s"
enableProfiling: false
healthzBindAddress: 0.0.0.0:10256
hostnameOverride: {{ hostvars[inventory_hostname]['ansible_nodename'] }}
iptables:
 masqueradeAll: true
 masqueradeBit: "14"
 minSyncPeriod: "0s"
 syncPeriod: "30s"
ipvs:
 excludeCIDRs: []
 minSyncPeriod: "0s"
 scheduler: "rr"
 syncPeriod: "30s"
 strictARP: false
metricsBindAddress: 127.0.0.1:10249
mode: "ipvs"
nodePortAddresses: {{ CLUSTER_NETWORK_CIDR }}
oomScoreAdj: "-999"
portRange: ''
udpIdleTimeout: "250ms"
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
clusterDNS:
- "10.32.40.155"
- "10.32.40.156"
- "10.32.40.154"

apiServer:
  extraArgs:
    advertise-address: 10.32.40.101
    anonymous-auth: "false"
    enable-admission-plugins: AlwaysPullImages,DefaultStorageClass
    audit-log-path: /var/log/k8-audit.log
    authorization-mode: Node,RBAC
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /opt/ca/pki
clusterName: main_k8_cluster
controllerManager:
  extraArgs:
    bind-address: 10.32.40.101
    cluster-signing-key-file: /opt/ca/pki/ca.key
    deployment-controller-sync-period: "50s"
dns:
  type: CoreDNS
etcd:
  external:
    caFile: /opt/ca/pki/ca.pem
    certFile: /opt/ca/pki/etcd.pem
    endpoints:
    - https://10.32.40.155:2379
    - https://10.32.40.156:2379
    - https://10.32.40.154:2379
    keyFile: /opt/ca/pki/etcd-key.pem
imageRepository: k8s.gcr.io
kind: ClusterConfiguration
kubernetesVersion: v1.17.4
networking:
  dnsDomain: vless.ru
  podSubnet: 10.0.0.0/16
  # FROM serviceSubnet: 10.10.0.0/24
  serviceSubnet: 10.32.0.0/16
scheduler: {}

apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: v1.18.0
api:
    advertiseAddress: 10.32.40.155
    bindPort: 6443
    controlPlaneEndpoint: vortex.vless.ru
apiServer:
  timeoutForControlPlane: 4m0s
  advertise-address: 10.32.40.155
  anonymous-auth: "false"
  enable-admission-plugins: PodSecurityPolicy,AlwaysPullImages,DefaultStorageClass
  audit-log-path: /var/log/k8s-audit.log
  certSANs:
  - 127.0.0.1
  - 10.32.40.101
  - 10.32.40.100
  - 10.32.40.155
  - 10.32.40.156
  - 10.32.40.154
  - vortex.vless.ru
  - vortex-node-05-production
  - vortex-node-04-production
  - vortex-node-06-production
  extraVolumes:
  - name: "audit-policy"
    hostPath: "/etc/kubernetes/audit-policy.yaml"
    mountPath: "/etc/kubernetes/audit-policy.yaml"
    readOnly: false
    pathType: File
  - name: "audit-volume"
    hostPath: "/var/log/kubernetes/audit"
    mountPath: "/etc/kubernetes/audit"
    readOnly: false
    pathType: DirectoryOrCreate
  timeoutForControlPlane: 4m0s
certificatesDir: /opt/ca/pki
clusterName: "main_k8_cluster"
controlPlaneEndpoint: "vortex.vless.ru:6443"
controllerManager:
  cluster-signing-key-file: /opt/ca/pki/ca.key
  bind-address: 10.32.40.155
  deployment-controller-sync-period: "50s"
dns:
  type: CoreDNS
etcd:
  external:
        endpoints:
        - https://10.32.40.155:2379
        - https://10.32.40.154:2379
        - https://10.32.40.156:2379
        caFile: /opt/ca/pki/ca.pem
        certFile: /opt/ca/pki/etcd.pem
        keyFile: /opt/ca/pki/etcd-key.pem
imageRepository: k8s.gcr.io
networking:
  dnsDomain: vless.ru
  podSubnet: 10.32.0.0/16
  serviceSubnet: 10.0.0.0/11
scheduler:
    feature-gates: "TTLAfterFinished=true"
    advertiseAddress: 10.32.40.155

###

kubeadm init --kubernetes-version=v1.18.0 --pod-network-cidr=10.0.0.0/11 --service-cidr=1a


admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
  --advertise-address=${INTERNAL_IP} \\
  --kubelet-preferred-address-types=InternalIP \\
  --allow-privileged=true \\
  --apiserver-count=1 \\
  --audit-log-maxage=30 \\
  --audit-log-maxbackup=3 \\
  --audit-log-maxsize=100 \\
  --audit-log-path=/var/log/audit.log \\
  --authorization-mode=RBAC \\
  --bind-address=0.0.0.0 \\
  --client-ca-file=/var/lib/kubernetes/ca.pem \\
  --enable-swagger-ui=true \\
  --etcd-cafile=/var/lib/kubernetes/ca.pem \\
  --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
  --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
  --etcd-servers=https://${INTERNAL_IP}:2379 \\
  --event-ttl=1h \\
  --insecure-bind-address=0.0.0.0 \\
  --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
  --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\
  --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\
  --kubelet-https=true \\
  --runtime-config=rbac.authorization.k8s.io/v1alpha1 \\
  --service-account-key-file=/var/lib/kubernetes/ca-key.pem \\
  --service-cluster-ip-range=10.3.0.0/24 \\
  --service-node-port-range=30000-32767 \\
  --tls-ca-file=/var/lib/kubernetes/ca.pem \\
  --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\
  --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\
  --v=2

curl -sSL "https://raw.githubusercontent.com/kubernetes/kubernetes/${RELEASE}/build/debs/10-kubeadm.conf" | sed "s:/usr/bin:/opt/bin:g" > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf


apiServer:
  certSANs:
  - "vortex.vless.ru"
  - "vortex-node-01-production"
  - "vortex-node-02-production"
  - "vortex-node-03-production"
  - "vortex-node-04-production"
  - "vortex-node-05-production"
  - "vortex-node-06-production"
  - "vortex-node-07-production"
  - "vortex-node-08-production"
  - "vortex-node-09-production"
  - "vortex-node-10-production"
  - "vortex-node-11-production"
  - "10.32.40.151"
  - "10.32.40.152"
  - "10.32.40.153"
  - "10.32.40.154"
  - "10.32.40.155"
  - "10.32.40.156"
  - "10.32.40.157"
  - "10.32.40.158"
  - "10.32.40.159"
  - "10.32.40.160"
  - "10.32.40.161"
  - "10.32.40.100"
  - "10.32.40.101"
  - "10.32.40.102"
  - "185.40.28.115"
  - "10.32.40.154"
  - "185.40.28.126"
  - "10.32.40.156"
  - "185.40.28.91"
  peerCertSANs:
  - "vortex.vless.ru"
  - "vortex-node-01-production"
  - "vortex-node-02-production"
  - "vortex-node-03-production"
  - "vortex-node-04-production"
  - "vortex-node-05-production"
  - "vortex-node-06-production"
  - "vortex-node-07-production"
  - "vortex-node-08-production"
  - "vortex-node-09-production"
  - "vortex-node-10-production"
  - "vortex-node-11-production"
  - "10.32.40.151"
  - "10.32.40.152"
  - "10.32.40.153"
  - "10.32.40.154"
  - "10.32.40.155"
  - "10.32.40.156"
  - "10.32.40.157"
  - "10.32.40.158"
  - "10.32.40.159"
  - "10.32.40.160"
  - "10.32.40.161"
  - "10.32.40.100"
  - "10.32.40.101"
  - "10.32.40.102"
  - "185.40.28.115"
  - "10.32.40.154"
  - "185.40.28.126"
  - "10.32.40.156"
  - "185.40.28.91"
  extraArgs:
    advertise-address: 10.32.40.101
    anonymous-auth: "false"
    enable-admission-plugins: AlwaysPullImages,DefaultStorageClass
    audit-log-path: /var/log/k8-audit.log
    authorization-mode: Node,RBAC

/usr/bin/kube-apiserver \
  --admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota \
  --advertise-address=x.x.x.x \
  --allow-privileged=true \
  --audit-log-path=/var/lib/k8saudit.log \
  --authorization-mode=ABAC \
  --authorization-policy-file=/var/lib/kubernetes/authorization-policy.jsonl \
  --bind-address=0.0.0.0 \
  --etcd-servers=https://kube1:2379,https://kube2:2379,https://kube3:2379 \
  --etcd-cafile=/etc/etcd/ca.pem \
  --event-ttl=1h \
  --insecure-bind-address=0.0.0.0 \
  --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
  --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
  --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
  --kubelet-https=true \
  --service-account-key-file=/var/lib/kubernetes/ca-key.pem \
  --service-cluster-ip-range=10.32.0.0/24 \
  --service-node-port-range=30000-32767 \
  --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
  --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
  --token-auth-file=/var/lib/kubernetes/token.csv \
  --v=2 \
  --apiserver-count=3 \
  --storage-backend=etcd2

###

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flannel
subjects:
- kind: ServiceAccount
  name: flannel
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flannel
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-flannel-cfg
  namespace: kube-system
  labels:
    tier: node
    app: flannel
data:
  cni-conf.json: |
    {
      "name": "cbr0",
      "type": "flannel",
      "delegate": {
        "isDefaultGateway": true
      }
    }
  net-conf.json: |
    {
      "Network": "10.0.0.0/11",
      "Backend": {
        "Type": "vxlan"
      }
    }
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: kube-flannel-ds
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  template:
    metadata:
      labels:
        tier: node
        app: flannel
    spec:
      hostNetwork: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      serviceAccountName: flannel
      initContainers:
      - name: install-cni
        image: quay.io/coreos/flannel:v0.9.0-amd64
        command:
        - cp
        args:
        - -f
        - /etc/kube-flannel/cni-conf.json
        - /etc/cni/net.d/10-flannel.conf
        volumeMounts:
        - name: cni
          mountPath: /etc/cni/net.d
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      containers:
      - name: kube-flannel
        image: quay.io/coreos/flannel:v0.9.0-amd64
        command: [ "/opt/bin/flanneld", "--ip-masq", "--kube-subnet-mgr" ]
        securityContext:
          privileged: true
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: run
          mountPath: /run
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
      volumes:
        - name: run
          hostPath:
            path: /run
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
