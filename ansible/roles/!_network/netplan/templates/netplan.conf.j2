{% set second_ip = [] %}{% set public_nat_netmask = [] %}{% set second_ip_interface = [] %}{% set public_nat_broadcast = [] %}{% set public_nat_eth = [] %}{% set public_nat_network = [] %}{% set second_ip_network = [] %}{% set inventory_hostname_gw = [] %}{% for item in zero_cloud.cloud_bootstrap.servers.values() %}{% if item.name == inventory_hostname %}{% if inventory_hostname_gw.append(item.gw) %}{% endif %}{% endif %}{% endfor %}
# Generated by Ansible customization engine.
# Primary Interface 
{% set primary_link_ansible_vars_net_with_mask = hostvars[inventory_hostname]['ansible_default_ipv4']['network'] + '/24' %}
# name: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}
# public_nat_ip: {{ public_nat_ip }}
# public_nat_gw: {{ public_nat_gw }}
# public_interface 
# ansible_default_ipv4: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
{% for item in ansible_interfaces %}
# Interface: {{ item }}
{% if hostvars[inventory_hostname]['ansible_'~item]['ipv4']['address'] is defined %}
# {{ hostvars[inventory_hostname]['ansible_'~item]['ipv4']['address'] }}
{% if hostvars[inventory_hostname]['ansible_'~item]['ipv4']['address'] == hostvars[inventory_hostname].second_ip %}
# MATCHED SECOND INTERFACE NAME BY IP
# {{ item }}
{% set second_ip_interface = second_ip_interface.append(item | join) %}
{% endif %}
{% set check_address = hostvars[inventory_hostname]['ansible_'~item]['ipv4']['address'] %}
# check_address: {{ check_address }}
{% if check_address == public_nat_ip %}
# check_address == public_nat_ip
{% set public_nat_eth = hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] -%}
{% set public_nat_network = public_nat_network.append(hostvars[inventory_hostname]['ansible_'~item]['ipv4']['network']) -%}
{% set public_nat_broadcast = public_nat_broadcast.append(hostvars[inventory_hostname]['ansible_'~item]['ipv4']['broadcast']) -%}
{% set public_nat_netmask = public_nat_netmask.append(hostvars[inventory_hostname]['ansible_'~item]['ipv4']['netmask']) -%}
{% else %}
{% set public_nat_eth = hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] -%}
{% if check_address == hostvars[inventory_hostname]['second_ip'] %}{% set second_ip_interface = item | join %}{% else %}
{% if check_address == second_ip %}
{% set second_ip_network = second_ip_network.append(hostvars[inventory_hostname]['ansible_'~item]['ipv4']['network']) -%}
# second_ip_network: {{ second_ip_network }}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
# second_ip_network: {{ second_ip_network | join }}
# public_nat_eth: {{ public_nat_eth | join }}
# public_nat_network: {{ public_nat_network | join }}
# public_nat_broadcast: {{ public_nat_broadcast | join }}
# public_nat_netmask: {{ public_nat_netmask | join }}
{% set public_nat_broadcast_with_mask = public_nat_network | join + '/' + public_nat_netmask | join %}
# Public NAT network prefix: {{ public_nat_broadcast_with_mask | ipaddr('prefix') }}
# network/mask: {{ primary_link_ansible_vars_net_with_mask }}
# network prefix: {{ primary_link_ansible_vars_net_with_mask | ipaddr('prefix') }}
# Second Interface 
# name: {{ hostvars[inventory_hostname]['second_iface'] }}
# network: {{ second_network_subnet | ipaddr('network') }}
network:
  version: 2
  renderer: networkd
  ethernets:
    {{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] | join }}{% raw %}:
      dhcp4: no
      dhcp6: no
      addresses:
      - {% endraw %}{% if public_nat_ip == hostvars[inventory_hostname]['ansible_default_ipv4']['address'] %}{{ public_nat_ip }}{% else %}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}{% endif %}{% raw %}/24{% endraw %}{% if inventory_hostname in groups['vlan_network_balancer'] | default([]) or inventory_hostname in groups['vlan_frontend'] | default([]) %}{% raw %}
      # GW FOR FRONTEND AND BALANCER AS DEFAULT - DMZ to INTERNET
      gateway4: "{% endraw %}{% if inventory_hostname_gw | join != 'REPLACED' %}{{ inventory_hostname_gw | join }}{% else %}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['gateway'] }}{% endif %}"{% endif %}{% if inventory_hostname in groups['nginx-frontend'] | default([]) and inventory_hostname in groups['vlan_frontend'] | default([]) %}{% endif %}
{% if ansible_environment_security_configuration != 'pci' %}
{% if inventory_hostname in groups['vlan_backend_node'] | default([]) and inventory_hostname not in groups['nginx-frontend'] | default([]) %}{% raw %}
      # GW FOR BACKEND TO BALANCER NETWORK (BALANCER TO BALANCER NETWORK)
      gateway4: "{% endraw %}{{ public_nat_gw }}{% raw %}"{% endraw %}{% endif %}
{% if inventory_hostname in groups['vortex-core-master-backend'] | default([]) %}
{% raw %}
      # GW FOR BACKEND TO BALANCER NETWORK (BALANCER TO BALANCER NETWORK)
      gateway4: "{% endraw %}{{ hostvars[inventory_hostname]['public_nat_gw'] }}"{% endif %}{% raw %}
      {% endraw %}
{% if inventory_hostname in groups['vlan_backend_node'] | default([]) %}
{% for host in groups['master-bind-master-backend'] | default([]) %}
{% if hostvars[host]['second_ip'] is defined %}{% raw %}
      #   # SECOND IP
      # nameservers:
      #   search:
      #     - "{% endraw %}{{ public_consul_domain }}{% raw %}"
      #   addresses:
      #     - {% endraw %}{{ hostvars[host]['second_ip'] }}
{% else %}{% raw %}
        # DEFAULT IP
      nameservers:
        search:
          - "{% endraw %}{{ public_consul_domain }}{% raw %}"
        addresses:
          - {% endraw %}{{ hostvars[host]['ansible_default_ipv4']['address'] }}
{% endif %}
{% endfor %}
{% else %}
{% if inventory_hostname in groups['vlan_network_balancer'] | default([]) %}{% raw %}
      nameservers:
        search:
          - "{% endraw %}{{ public_consul_domain }}"{% raw %}
        addresses:{% endraw %}
{% if hostvars[inventory_hostname]['second_ip'] is defined %}{% raw %}
          # wip to check ... - {% endraw %}{{ hostvars[inventory_hostname]['second_ip'] }}{% raw %}
          - {% endraw %}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
{% endif %}
{% else %}{% raw %}
        # addresses:
        #   - {% endraw %}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
{% endif %}
{% endif %}
{% endif %}
{% raw %}
    {% endraw %}{% if hostvars[inventory_hostname]['second_iface'] == 'REPLACED' %}{{ second_ip_interface | join }}{% else %}{{ hostvars[inventory_hostname]['second_iface'] }}{% endif %}{% raw %}:
      dhcp4: no
      dhcp6: no
      addresses:
      - {% endraw %}{{ hostvars[inventory_hostname]['second_ip'] }}{% raw %}/24{% endraw %}
{% if inventory_hostname in groups['vlan_backend_node'] | default([]) or inventory_hostname in groups['master-bind-master-backend'] | default([]) or inventory_hostname in groups['nginx-frontend'] | default([]) %}
{% if ansible_environment_security_configuration == 'pci' %}{% raw %}
      # GW FOR BACKEND TO BALANCER NETWORK (BALANCER TO BALANCER NETWORK)
      # gateway4: "{% endraw %}{{ hostvars[inventory_hostname]['ids_primary_vip_gateway'] }}"{% endif %}{% raw %}
      nameservers:
        search:
          - "{% endraw %}{{ public_consul_domain }}"
{% if inventory_hostname in groups['vlan_backend_node'] | default([]) %}{% raw %}
        addresses:{% endraw %}
{% for host in groups['master-bind-master-backend'] | default([]) %}
{% if hostvars[host]['second_ip'] is defined %}{% raw %}
          - {% endraw %}{{ hostvars[host]['second_ip'] }}
{% else %}{% raw %}
          - {% endraw %}{{ hostvars[host]['ansible_default_ipv4']['address'] }}
{% endif %}
{% endfor %}
{% else %}
{% if inventory_hostname in groups['vlan_network_balancer'] | default([]) %}{% raw %}
        addresses:{% endraw %}
{% if hostvars[inventory_hostname]['second_ip'] is defined %}{% raw %}
          - {% endraw %}{{ hostvars[inventory_hostname]['second_ip'] }}
{% else %}{% raw %}
          - {% endraw %}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
{% endif %}
{% else %}{% raw %}
        addresses:
          - {% endraw %}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
{% endif %}
{% endif %}
{% endif %}
