
- name: '|S2| STACK WORKERS UPLOAD IMAGES | For remote generating the docker-compose ansible load vars on localhost'
  become: true
  hosts: "localhost"
  tasks:

    - name: '|S2| Include vars'
      include_vars: "{{ ansible_root_directory }}/group_vars/!_ApplicationDocker_Template/docker-compose-template.yml"

    - name: '|S1| Include vars by list'
      include_vars: "{{ item }}"
      with_items: 
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/main.yml"
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/{{ ansible_cloud_type }}.yml"
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/shared.yml"
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/zone.yml"
        - "{{ ansible_root_directory }}/group_vars/!_anyCloud/anyCloud.yml"
        - "{{ ansible_root_directory }}/group_vars/all.yml"
        - "{{ ansible_root_directory }}/group_vars/all/directories.map.yml"
        - "{{ ansible_root_directory }}/inventories/products/{{ ansible_product }}/{{ ansible_environment }}/group_vars/dns/{{ HOSTS | default('cloud-bind-frontend-dns') }}/{{ HOSTS | default('cloud-bind-frontend-dns') }}.yml"
        - "{{ ansible_root_directory }}/inventories/products/{{ ansible_product }}/{{ ansible_environment }}/group_vars/all.yml"
        - "{{ ansible_root_directory }}/inventories/0z-cloud/products/types/!_{{ ansible_cloud_type }}/{{ ansible_product }}/{{ ansible_environment }}/bootstrap_vms/group_vars/all.yml"


    # - name: RAW SHELL | Install docker-compose AND little hooks
    #   shell: "{{ item }}"
    #   with_items:
    #     - "docker-compose --version"
    #     - "sysctl -w vm.max_map_count=262145"

    - name: '|S2| Get and set current workdir'
      shell: ls -la ./../../
      register: current_working_directory

    - name: '|S2| Show current directory path' 
      debug:
        msg: "{{ current_working_directory }}"

    - name: '|S2| INCLUDE | Variables passed on-fly from CI'
      include_vars: "{{ root_dir_path }}/.local/ci_version.yml"

    - name: '|S2| INCLUDE | Variables passed on-fly from CI about tags'
      include_vars: "{{ root_dir_path }}/.local/current_tags.yml"

- name: '|S2| STACK | Run to remote generate the docker-compose and deploy stack'
  become: true
  hosts: "{{ HOSTS | default('cloud-bind-frontend-dns') }}"
  pre_tasks:

    - name: '|S2| Include vars by list'
      include_vars: "{{ item }}"
      with_items: 
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/main.yml"
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/{{ ansible_cloud_type }}.yml"
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/shared.yml"
        - "{{ ansible_root_directory }}/group_vars/products/{{ ansible_product }}/zone.yml"
        - "{{ ansible_root_directory }}/group_vars/!_anyCloud/anyCloud.yml"
        - "{{ ansible_root_directory }}/group_vars/all.yml"
        - "{{ ansible_root_directory }}/group_vars/all/directories.map.yml"
        - "{{ ansible_root_directory }}/inventories/products/{{ ansible_product }}/{{ ansible_environment }}/group_vars/dns/{{ HOSTS | default('cloud-bind-frontend-dns') }}/{{ HOSTS | default('cloud-bind-frontend-dns') }}.yml"
        - "{{ ansible_root_directory }}/inventories/products/{{ ansible_product }}/{{ ansible_environment }}/group_vars/all.yml"
        - "{{ ansible_root_directory }}/inventories/0z-cloud/products/types/!_{{ ansible_cloud_type }}/{{ ansible_product }}/{{ ansible_environment }}/bootstrap_vms/group_vars/all.yml"
        - "{{ ansible_root_directory }}/group_vars/!_Applications_Core/{{ ANSIBLE_APPLICATION_TYPE }}/{{ ANSIBLE_APPLICATION_TYPE }}_settings_map.yml"
        - "{{ ansible_root_directory }}/group_vars/!_Applications_Core/{{ ANSIBLE_APPLICATION_TYPE }}/{{ ANSIBLE_APPLICATION_TYPE }}_folders_map.yml"
#   vars_files:
#   - "{{ ansible_root_directory }}/group_vars/!_ApplicationDocker_Template/docker-compose-template.yml"
  tasks:

      - name: '|S2| RAW SHELL | Install docker-compose AND little hooks'
        shell: "{{ item }}"
        with_items:
            # - "curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose"
            # - "chmod +x /usr/local/bin/docker-compose"
            # - "docker-compose --version"
            # - "cp /usr/local/bin/docker-compose /usr/bin/docker-compose"
            - "docker-compose --version"
            - "sysctl -w vm.max_map_count=262145"

      - name: '|S2| Include vars'
        include_vars: "{{ ansible_root_directory }}/group_vars/!_ApplicationDocker_Template/docker-compose-template.yml"
        delegate_to: localhost
        
      - name: '|S2| INCLUDE | Variables passed on-fly from CI'
        include_vars: "{{ root_dir_path }}/.local/ci_version.yml"
        delegate_to: localhost

      - name: '|S2| INCLUDE | Variables passed on-fly from CI about tags'
        include_vars: "{{ root_dir_path }}/.local/current_tags.yml"
        delegate_to: localhost

      - name: '|S2| Get and set current workdir'
        shell: ls -la ./../
        register: current_working_directory

      - name: '|S2| Show current directory path'
        debug:
          msg: "{{ current_working_directory }}"

      - name: '|S2| INCLUDE | Variables passed on-fly from CI'
        include_vars: "{{ root_dir_path }}/.local/ci_version.yml"

      - name: '|S2| INCLUDE | Variables passed on-fly from CI about tags'
        include_vars: "{{ root_dir_path }}/.local/current_tags.yml"

      - name: '|S2| PREPARE | Include environment variables for environment cloud'
        include_vars: "{{ ansible_root_directory }}/inventories/products/{{ ansible_product }}/{{ ansible_environment }}/group_vars/dns/{{ HOSTS | default('cloud-bind-frontend-dns') }}/{{ HOSTS | default('cloud-bind-frontend-dns') }}.yml"

      # - name: '|S2| Include environment variables for applications'
      #   include_vars: "{{ ansible_root_directory }}/group_vars/!_Applications_Core/{{ ANSIBLE_APPLICATION_TYPE }}/{{ ANSIBLE_APPLICATION_TYPE }}_folders_map.yml"

      # - name: '|S2| PREPARE | Include environment variables for applications'
      #   include_vars: "{{ ansible_root_directory }}/group_vars/!_Applications_Core/{{ ANSIBLE_APPLICATION_TYPE }}/{{ ANSIBLE_APPLICATION_TYPE }}_settings_map.yml"

      - name: '|S2| DEBUG | show items in dict'
        debug:
          msg: "{{ item }}"
        with_items: "{{ all_services_settings_map }}"

      - name: '|S2| DEBUG | show items in dict about spec tags'
        debug:
          msg: "{{ lookup('vars', 'passed_ci_docker_tag_' + item) }}"
        with_items: "{{ all_services_settings_map }}"

      - name: '|S2| PREPARE | Create the directories'
        file:
          path: "{{ item.value }}"
          state: directory
          mode: 0755
        with_dict: "{{ all_services_location_map.directories | default({}) }}"

      - name: '|S2| PREPARE | Template the docker-stack.yml'
        template:
          src: "{{ ansible_root_directory }}/group_vars/!_ApplicationDocker_Template/docker-compose-template.yml.j2"
          dest: "{{ all_services_location_map.directories.stack }}/docker-stack.yml"
        run_once: true

      - name: '|S2| PREPARE | Template the docker-compose-image-puller.yml.j2'
        template:
          src: "{{ ansible_root_directory }}/group_vars/!_ApplicationDocker_Template/docker-compose-image-puller.yml.j2"
          dest: "{{ all_services_location_map.directories.stack }}/docker-compose-image-puller.yml"
        run_once: true

      # - name: '|S2| PREPARE | Docker login'
      #   shell: "echo {{ ANSIBLE_TRIGGER_TOKEN }} | docker login {{ ANSIBLE_REGISTRY_URL }} -u root --password-stdin"
      #   register: docker_login_result

      - name: '|S2| PULL | Download and updage all local images imadently'
        command: docker-compose -f {{ all_services_location_map.directories.stack }}/docker-compose-image-puller.yml pull 
        register: docker_pull_result

      - name: '|S2| DEPLOY | Stack deploy'
        shell: docker stack deploy --prune --resolve-image always --with-registry-auth --compose-file {{ all_services_location_map.directories.stack }}/docker-stack.yml {{ ansible_product }}-{{ ansible_environment }}
        run_once: true