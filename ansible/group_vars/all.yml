# SERVICE DISCOVERY PRIMARY SWITHER WHICH DETERMINE THE USING THE SERVICE DISCOVERY AT PUBLIC DMZ 
consul_service_discovery_state: "{{ selected_consul_service_discovery_state | default(consul_service_discovery_state_default) }}"
consul_service_discovery_state_default: false

ansible_environment_root_group_vars: true
# ansible_cloud_oz_group_vars_all_path: ""./inventories/0z-cloud/products/types/\!_{{ ansible_cloud_type }}/{{ ansible_product }}/{{ ansible_environment }}/bootstrap_vms/group_vars/all.yml

anycloud_results_vpc_zone_virtual_abstract: 
  dns_servers: "{{ anycloud_adapter_vpc_zone_virtual_abstract_dns_servers | default(anycloud_defaults_vpc_zone_virtual_abstract.dns_servers) }}"
  zones: "{{ anycloud_adapter_vpc_zone_virtual_abstract | default(anycloud_defaults_vpc_zone_virtual_abstract_layout) }}"
  initial_only_dns_servers: "{{ anycloud_adapter_vpc_zone_virtual_abstract_initial_only_dns_servers | default(anycloud_defaults_vpc_zone_virtual_abstract.dns_servers) }}"
  layout: "{{ ansilbe_infrastructure_target_layout_default | default(anycloud_result_vpc_zone_virtual_abstract_layout) }}"
  landscape: "{{ anycloud_adapter_vpc_zone_virtual_abstract_layout | default(anycloud_defaults_vpc_zone_virtual_abstract_layout) }}"
################################################################################################
# DOCKER
################################################################################################
## Docker Inventory Location Settings
default_docker_image_environment_tag: latest
default_docker_image_environment_location: registry
################################################################################################
# EVE EDGE 
################################################################################################
default_docker_eve_workdir_standalone_environment_location: "{{ all_services_location_map.directories.eve }}:/opt/eve-edge-sync"
default_docker_adam_workdir_standalone_environment_location: "{{ all_services_location_map.directories.adam }}:/opt/adam-edge-sync"
default_docker_eden_workdir_standalone_environment_location: "{{ all_services_location_map.directories.eden }}:/opt/eden-edge-sync"


################################################################################################

default_docker_database_mongo_environment_location: "{{ all_services_location_map.directories.mongo }}:/data/db"
default_docker_database_postgresql_environment_location: "{{ all_services_location_map.directories.database }}:/var/lib/postgresql/data"
default_docker_database_postgresql_logs_environment_location: "{{ all_services_location_map.directories.database_log }}:/var/log/postgresql"
default_docker_database_mariadb_environment_location: "{{ all_services_location_map.directories.mariadb_database }}:/var/lib/mysql"
default_docker_database_mariadb_logs_environment_location: "{{ all_services_location_map.directories.mariadb_database_logs }}:/var/log/mysql/"
default_docker_database_redis_environment_location: "{{ all_services_location_map.directories.redis_data }}:/data"
default_docker_database_binary_socket_environment_location: "/usr/local/bin/docker:/usr/local/bin/docker"
default_docker_database_docker_socket_environment_location: "/var/run/docker.sock:/var/run/docker.sock"

# CLOUD REPO AND REGISTRIES
nexus_version: 3.25.1-04
nexus_install_tmp_base_dir: /tmp
nexus_install_dir: /opt/nexus
nexus_data_dir: /opt/sonatype-work
nexus_install_tmp_dir_name: "nexus-{{ nexus_version }}"
nexus_install_tmp_dir: "{{ nexus_install_tmp_base_dir }}/{{ nexus_install_tmp_dir_name }}"

nexus_instance_settings:
    nexus_download_url: "https://sonatype-download.global.ssl.fastly.net/repository/downloads-prod-group/3/nexus-{{ nexus_version }}-unix.tar.gz"
    nexus_install_tmp_data_dir: "{{ nexus_install_tmp_base_dir }}/sonatype-work"
    nexus_service_file_path: "{{ nexus_install_dir }}/bin/nexus"
    nexus_config_file_path: "{{ nexus_data_dir }}/nexus3/etc/nexus.properties"
    nexus_config_vmoptions_file_path: "{{ nexus_install_dir }}/bin/nexus.vmoptions"
    nexus_app_port: "{{ nexus_service_listen_port }}"
    nexus_app_host: "0.0.0.0"
    # Example memory for 8GB host ref:https://help.sonatype.com/repomanager3/system-requirements#SystemRequirements-Memory
    nexus_vmoptions_xms: "2703M"
    nexus_vmoptions_xmx: "2703M"
    nexus_vmoptions_maxdirectmem: "2703M"
    nexus_user: nexus
    nexus_group: nexus
    nexus_install_tmp_base_dir: "{{ nexus_install_tmp_base_dir }}"
    nexus_version: "{{ nexus_version }}"
    nexus_install_dir: "{{ nexus_install_dir }}"
    nexus_all_in_one: false
    nexus_admin_init_password_path: /opt/sonatype-work/nexus3/admin.password
    nexus_scripts_allow: false
    nexus_install_tmp_dir: "{{ nexus_install_tmp_dir }}"
    nexus_data_dir: "{{ nexus_data_dir }}"
# ROOT DICT
default_dns_service_listen_port: 53

# GLUSTERFS VERSION SETTINGS
glusterfs_environment_past_version: ppa:gluster/glusterfs-4.1
glusterfs_environment_middle_version: ppa:gluster/glusterfs-7
glusterfs_environment_new_version: ppa:gluster/glusterfs-7
# glusterfs_environment_new_version: ppa:gluster/glusterfs-8
### Ansible telegram notification settings

### Notifier
NOTIFIER_TELEGRAM_CHAT_ID: "-255332677"
NOTIFIER_TELEGRAM_TOKEN: "460942177:AAHV0be08OZmRqhG0dXEabviEdB6WFDKYlc"

### Links / Url's / etc

GITLAB_URL: https://gitlab.vortex.ru

# Primary application databases initialization and migrations


primary_databases_for_services:
    backend:
      run_container: backend
      db_container: mariadb
      db_name: "{{ APPLICATION_SET_SOLUTION_FROM_SERVICES_FOLDERWEB_DB_DATABASE }}"
      db_commands:
        - "mysql -uroot -e \"create database '{{ APPLICATION_SET_SOLUTION_FROM_SERVICES_FOLDERWEB_DB_DATABASE }}'\""
      run_commands:        
        - 'bundle exec rake db:create'
        - 'bundle exec rake db:migrate'
        - 'bundle exec rake db:seed'
      migrate_commands:        
        - 'bundle exec rake db:migrate'
        - 'bundle exec rake db:seed'
    metabase:
      run_container: metabase
      db_container: postgres
      db_name: "metabase_{{ ansible_environment }}"
      db_commands:
        - 'psql -h localhost -p 5432 -U postgres -c \"create database metabase_{{ ansible_environment }};\"'
      run_commands:
        - 'echo 1'
      migrate_commands:
        - 'echo 1'

# primary_databases_for_services:
#    card_storage:
#       run_container: card_storage
#       db_container: postgres
#       db_name: "card_storage_{{ ansible_environment }}"
#       db_commands:
#         - 'psql -h localhost -p 5432 -U postgres -c \"create database card_storage_{{ ansible_environment }};\"'
#       run_commands:        
#         - 'bundle exec rake db:create'
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#       migrate_commands:        
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#    wallet:
#       run_container: wallet
#       db_container: postgres
#       db_name: "wallet_{{ ansible_environment }}"
#       db_commands:
#         - 'psql -h localhost -p 5432 -U postgres -c \"create database wallet_{{ ansible_environment }};\"'
#       run_commands:        
#         - 'bundle exec rake db:create'
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#       migrate_commands:        
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#    settings:
#       run_container: settings
#       db_container: postgres
#       db_name: "settings_{{ ansible_environment }}"
#       db_commands:
#         - 'psql -h localhost -p 5432 -U postgres -c \"create database settings_{{ ansible_environment }};\"'
#       run_commands:        
#         - 'bundle exec rake db:create'
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#       migrate_commands:        
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#    core:
#       run_container: core
#       db_container: postgres
#       db_name: "core_{{ ansible_environment }}"
#       db_commands:
#         - 'psql -h localhost -p 5432 -U postgres -c \"create database core_{{ ansible_environment }};\"'
#       run_commands:
#         - 'bundle exec rake db:create'
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#         - 'bundle exec rake vortex:setup_db_data'
#         - 'bundle exec rake vortex:add_demo_business_account'
#       migrate_commands:
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#         - 'bundle exec rake vortex:setup_db_data'
#         - 'bundle exec rake vortex:add_demo_business_account'
#    business:
#       run_container: business
#       db_container: postgres
#       db_name: "business_{{ ansible_environment }}"
#       db_commands:
#         - 'psql -h localhost -p 5432 -U postgres -c \"create database business_{{ ansible_environment }};\"'
#       run_commands:
#         - 'bundle exec rake db:create'
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#       migrate_commands:
#         - 'bundle exec rake db:migrate'
#         - 'bundle exec rake db:seed'
#    metabase:
#       run_container: metabase
#       db_container: postgres
#       db_name: "metabase_{{ ansible_environment }}"
#       db_commands:
#         - 'psql -h localhost -p 5432 -U postgres -c \"create database metabase_{{ ansible_environment }};\"'
#       run_commands:
#         - 'echo 1'
#       migrate_commands:
#         - 'echo 1'

# Settings and dicts

java_settings:
    packages:
       - oracle-java8-installer
       - oracle-java8-unlimited-jce-policy
       - oracle-java8-set-default
       - libtomcat11-java
       - libservlet3.0-java
       - libgeronimo-jta-1.1-spec-java
       - libecj-java
       - libcommons-dbcp-java
       - libcommons-pool-java
       - libcommons-collections3-java
       - java-common
    configs:
       java_security: "{{ ansible_java_home_env_var }}/jre/lib/security/java.security"
    security:
       jdk_tls_disabled_algorithms: "SSLv3, RC4, DH keySize < 768"
       jdk_certpath_disabled_algorithms: "MD2, RSA keySize < 1024"
    environment_vars:
       JAVA_HOME: "{{ ansible_java_home_env_var }}"
    directories:
       scritps_dir: "/wrk/scripts/ansible/java"

semaphore_mysql_settings:
   directories:
       path: "/docker/semaphore/mysql/{{ ansible_environment }}"
       data_dir: "/docker/semaphore/mysql/{{ ansible_environment }}/data"
       config_path: "/docker/semaphore/mysql/{{ ansible_environment }}/config"
       logs_path: "/docker/semaphore/mysql/{{ ansible_environment }}/logs"
       sql_files: "/docker/semaphore/mysql/{{ ansible_environment }}/sql_files"
   port: 3306
   user: semaphore
   password: 2141290ufisa_ASdi1
   database: semaphore

semaphore_settings:
   directories:
       path: "/docker/semaphore/ui/{{ ansible_environment }}"
       data_dir: "/docker/semaphore/ui/{{ ansible_environment }}/data"
       config_path: "/docker/semaphore/ui/{{ ansible_environment }}/config"
       logs_path: "/docker/semaphore/ui/{{ ansible_environment }}/logs"
       playbooks: "/docker/semaphore/ui/{{ ansible_environment }}/playbooks"
   port: 3000
   user: semaphore
   password: 2141290ufisa_ASdi1
   database: semaphore

postgresql_settings:
   database_jar_url: "https://jdbc.postgresql.org/download/postgresql-9.4.1212.jar"
   driver_full_path: "/docker/teamcity/{{ ansible_environment }}/data/lib/jdbc/postgresql-9.4.1212.jar"
   directories:
       path: "/docker/postgresql/{{ ansible_environment }}"
       data_dir: "/docker/postgresql/{{ ansible_environment }}/data"
       config_path: "/docker/postgresql/{{ ansible_environment }}/config"
       logs_path: "/docker/postgresql/{{ ansible_environment }}/logs"
       lib_jdbc: "/docker/teamcity/{{ ansible_environment }}/data/lib/jdbc"
   port: 5432
   user: teamcity
   password: 09reumdvh42ans6rT
   database: teamcity

teamcity_agent_settings:
   directories:
       path: "/docker/teamcity_agent/{{ ansible_environment }}"
       data_dir: "/docker/teamcity_agent/{{ ansible_environment }}/data"
       config_path: "/docker/teamcity_agent/{{ ansible_environment }}/config"
       lib_jdbc: "/docker/teamcity_agent/{{ ansible_environment }}/data/lib/jdbc"
   user: teamcity
   password: 09reumdvh42ans6rT
   database: teamcity

teamcity_settings:
   directories:
       path: "/docker/teamcity/{{ ansible_environment }}"
       data_dir: "/docker/teamcity/{{ ansible_environment }}/data"
       config_path: "/docker/teamcity/{{ ansible_environment }}/config"
       lib_jdbc: "/docker/teamcity/{{ ansible_environment }}/data/lib/jdbc"
   port: "{{ teamcity_service_listen_port }}"
   user: teamcity
   password: 09reumdvh42ans6rT
   database: teamcity

sshusers: |
  {% if ansible_product == 'vortex' %}
  {
      'vortex': { 'shell': '/bin/bash', 'key': "{{ lookup('file', '.files/ssh_keys/{{ ansible_product }}/rostislav.pub') | b64encode }}", },
  }
  {% endif %}
  {% if ansible_product == 'vortex' %}
  {
      'vortex': { 'shell': '/bin/bash', 'key': "{{ lookup('file', '.files/ssh_keys/{{ ansible_product }}/rostislav.pub') | b64encode }}", },
  }
  {% endif %}
  {% if ansible_product == 'office' %}
  {
      'vortex': { 'shell': '/bin/bash', 'key': "{{ lookup('file', '.files/ssh_keys/{{ ansible_product }}/rostislav.pub') | b64encode }}", },
      'vortex_ansible': { 'shell': '/bin/bash', 'key': "{{ lookup('file', '.files/ssh_keys/{{ ansible_product }}/rostislav.pub') | b64encode }}",},
  }
  {% endif %}
  {% if ansible_product == 'test4' %}
  {
      'vortex': { 'shell': '/bin/bash', 'key': "{{ lookup('file', '.files/ssh_keys/{{ ansible_product }}/rostislav.pub') | b64encode }}", },
  }
  {% endif %}
  {% if ansible_product == 'test3' %}
  {
      'vortex': { 'shell': '/bin/bash', 'key': "{{ lookup('file', '.files/ssh_keys/{{ ansible_product }}/rostislav.pub') | b64encode }}", },
  }
  {% endif %}

#Percona MYSQL Exporter defaults

percona_mysql_exporter:
    directories:
        working_etc_directory: /opt/percona_mysql_exporter/{{ ansible_environment }}/etc
        working_docker_build_directory: /opt/percona_mysql_exporter/{{ ansible_environment }}/build_docker

#Font Name: 3D-ASCII
