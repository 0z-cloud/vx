apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
    field.cattle.io/creatorId: user-rxbgq
  creationTimestamp: null
  generation: 1
  labels:
    cattle.io/creator: norman
    workload.user.cattle.io/workloadselector: deployment-postgresql-postgres
  name: postgres
  selfLink: /apis/extensions/v1beta1/namespaces/postgresql/deployments/postgres
spec:
  paused: true
  progressDeadlineSeconds: 600
  replicas: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-postgresql-postgres
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cattle.io/timestamp: "2019-07-03T12:53:21Z"
        workload.cattle.io/state: '{"d29ya2VyMg==":"c-4rvhr:m-01925b7892e2"}'
      creationTimestamp: null
      labels:
        workload.user.cattle.io/workloadselector: deployment-postgresql-postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_PASSWORD
        - name: POSTGRES_USER
          value: postgres
        image: postgres
        imagePullPolicy: Always
        name: postgres
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          procMount: Default
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres
      dnsPolicy: ClusterFirst
      nodeName: worker2
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: postgres
        persistentVolumeClaim:
          claimName: postgres
status: {}
