class CountdownHandler{constructor(config){this.registeredCountdowns=new Set,this.registeredIntervalID=void 0,this.config={serverTimestampOffset:config.serverTimestampOffset}}registerCountdown(countdownCtorArgs){const endPromise=new Promise(resolve=>{this.registeredCountdowns.add({$element:countdownCtorArgs.$element,endTimestamp:1e3*countdownCtorArgs.endTimestamp,isReverse:countdownCtorArgs.isReverse,reverseEndTimestamp:1e3*countdownCtorArgs.reverseEndTimestamp,serverTimestampOffset:this.config.serverTimestampOffset,promiseResolver:resolve})});return this._startEventLoop(),endPromise}unregisterCountdown(countdown){this.registeredCountdowns.delete(countdown)}_startEventLoop(){this.registeredIntervalID||(this.registeredIntervalID=setInterval(()=>this._processCountdowns(),500))}_stopEventLoop(){clearInterval(this.registeredIntervalID),this.registeredIntervalID=void 0}_processCountdowns(){[...this.registeredCountdowns].forEach(countdown=>{const result=this._onTimeCountdownTick({$element:countdown.$element,endTimestamp:countdown.endTimestamp,isReverse:countdown.isReverse,reverseEndTimestamp:countdown.reverseEndTimestamp,serverTimestampOffset:countdown.serverTimestampOffset});result.hasFinished&&(this.unregisterCountdown(countdown),countdown.promiseResolver())}),this.registeredCountdowns.size||this._stopEventLoop()}_onTimeCountdownTick({$element,endTimestamp,isReverse,reverseEndTimestamp,serverTimestampOffset}){const clientTimestamp=(new Date).getTime(),currentTimestamp=clientTimestamp+serverTimestampOffset;let timestampDiff=endTimestamp-currentTimestamp,countdownDisplayValue;isReverse&&(timestampDiff*=-1);const hasFinished=isReverse&&currentTimestamp>=reverseEndTimestamp+serverTimestampOffset||!(timestampDiff>0);return countdownDisplayValue=hasFinished?"-":this._createTimeCountdownDisplayValue({seconds:timestampDiff/1e3}),$element.innerHTML=countdownDisplayValue,{hasFinished}}_createTimeCountdownDisplayValue({seconds}){return uniengine.common.prettyTime({seconds})}}