<?php

require_once "unit.php";

// Боевой движок на PHP.
// Если сервер не поддерживает выполнение функции system(), то используется реализация боевого движка на PHP
// Если всё пойдет хорошо, то вполне возможно что PHP-движок останется основным

/*
Система боя

Система боя ОГейма включается в тех случаях, когда вражеские юниты встречаются у какой-либо планеты или луны.
Это случается в основном при нападении, но и при акции шпионажа, при которой зонд был обнаружен.
В этом случае боевые единицы выстраиваются и начинают палить друг по другу. Это происходит 6 раз (6 раундов).
Кто в конце остался с кораблями, тот победитель. Если в конце на обоих сторонах остались юниты, то бой заканчивается ничьёй и нападающий возвращается домой.
В каждом раунде корабли и защитные сооружения стреляют друг по другу. При этом каждый юнит стреляет один раз (исключение: скорострел) по случайно выбранной цели.
Огневая сила кораблей определяется оценкой атаки. Эта сила поглощается частично или полностью щитами. Если после этого ещё что-то остаётся от бойной силы, то это отнимается от брони корабля.
Выстрелы могут прийтись даже по кораблям с полностью уничтоженной броней. В конце раунда взрываются корабли, у которых больше не осталось брони.
Но и от 30% повреждения брони тоже имеется шанс взрыва, который растёт вместе со степенью повреждения.
Сила выстрела:
Каждый юнит имеет стартовую силу выстрела. Её можно увеличить исследованием оружейной техники на 10% за уровень.
Например: тяжёлый истребитель имеет оценку атаки 150. Оружейная техника уровня 10 подымает это на 100% то есть до 300.
При бое оценки атак всех юнитов прибавляются вместе.
Щиты:
Щиты первыми принимают удар на себя, предохраняя броню от повреждения. Только когда все щиты уничтожены, начинается уничтожение брони.
Щиты могут быть улучшены исследованием щитовой технологии на 10% за уровень исследования.
Щиты полностью восстанавливаются после каждого раунда. Внутри раунда щит уничтожается целыми ячейками по 1%, а остаток силы атаки менее 1% поглощается без каких-либо потерь.
Например, если силы выстрела хватает на 3.7% щита, будет уничтожено лишь 3%, а 0.7% поглотится. Поэтому выстрелы с силой менее 1%, отскакивают от щитов, не уменьшая их силы и не нанося вреда броне.
Вероятность взрыва в этом случае также не высчитывается.
Пример: лёгкий истребитель (атака 50) стреляет по большому куполу (щит 10000). После выстрела у купола всё ещё 10000 щитов, так как выстрел слишком слаб и щит его полностью поглощает.
Тяжёлый же истребитель имеет силу выстрела 150. Это 1.5% от щита, поэтому выстрел засчитывается и со щита снимается целая часть атаки - 1%.
После этого у купола остаётся сила щитов только 9900, так как 0.5% = 50 атаки поглощены щитом без потерь.
Броня:
Броня указывает, какой ущерб корабль может поглотить, прежде чем он будет уничтожен. Баллы брони всегда составляют 10% структуры.
Их можно посчитать уже при постройке юнита. За каждые 10 металла или кристалла (дейт здесь не считается) получается 1 пункт брони.
Сила брони может увеличиваться исследованием брони космических кораблей на 10% за уровень. К сожалению, корабли склонны к взрыванию уже от 30% повреждения брони.
После боя составляется боевой доклад. Единственное исключение: если юниты нападающего были уничтожены в первых 2-х раундах.
Тогда нападающий получает только короткое сообщение. Защитник получает доклад всегда
Порядок выстрелов
Свой порядок выстрелов точно определён, а именно слева направо в боевом докладе по принципу: лёгкие корабли, тяжёлые корабли, лёгкая защита, тяжёлая защита.
Выбор цели
Цель выбирается абсолютно случайно. Может быть, что все юниты палят по одной цели, хотя есть и другие цели, но это маловероятно.
Обычно должно быть так, что юниты, которых больше всего, получают больше всех выстрелов. При этом у каждого корабля и защитного сооружения есть вероятность, что в него попадут, равная 1/(кол-во всех юнитов)
Восстановление защиты:
Защитные сооружения имеют вероятность на восстановление после боя в 70%.
При небольшом количестве юнитов (меньше чем 10) эта вероятность высчитывается для каждого сооружения отдельно.
При большем количестве вероятность высчитывается для каждого ТИПА защиты. При этом восстанавливаются всегда 70% +/-10% разрушенной защиты.
При 10 ракетных установках это минимум 6 и максимум 8 восстановленных РУ. Дробные числа нормально округляются. Для каждого типа защиты вероятность высчитывается отдельно.
То есть, например, РУ и лазеры не прибавляются вместе. 

Скорострел              
Термин Скорострел означает способность некоторых типов кораблей производить за раунд более предписаного системой боёв одного выстрела. 
Вероятность повторного выстрела ограничена и зависит от типов стреляющего корабля и цели выстрела. Данные скорострела указываются в процентуальной вероятности повторного выстрела или - как в игре - среднем колличестве выстрелов за один раунд.
В деталях скорострел работает следующим образом:
Корабль, попадая по юниту, против которого у него есть скорострел, с определённой вероятностью стреляет ещё раз, в соответствии с системой боя - со случайным выбором цели.
При повторном попадании в такую боевую единицу, опять "бросается монета" и если повезёт, происходит ещё один выстрел. 
<табличка с повторными шансами выстрела прилагается на http://board.ogame.ru/index.php?page=Thread&threadID=47130 >
*/

/*
Работа движка с технической точки зрения.
Все массивы хранятся в виде длинных строк. Доступ к элементу arr[i] осуществляется конструкцией ord($arr{$i}), запись $arr{$i} = chr(n).
Сделано это для экономии памяти - строка занимает столько-же байт, сколько и символов в ней, а ассоциативные массивы в PHP достаточно прожорливые.

Массивы разделены на две одинаковые группы - атакующие и обороняющиеся. Каждая группа разделена на несколько массивов, причем все слоты совмещены (для упрощения индексации случайных выстрелов, от 0 до N):
$obj = { id, id, id, ... }     -- массив юнитов, для того чтобы номера объектов умещались в один байт (для экономии памяти), нумерация флота начинается от 02 (вместо 202), а обороны от 201 (вместо 401).  (n-200)
$slot = { n, n, n, ... }       -- номер слота юнита (для САБ), это нужно для генерации боевого доклада, чтобы рассортировать потом юниты по слотам.
$explo = { }                   -- массив взорванных юнитов, после каждого раунда взорванные юниты удаляются и формируется новый массив $obj. данные находятся в упакованном формате 8 юнитов на 1 байт
$shld = { }                    -- щиты юнитов, 100 ... 0. перед началом каждого раунда этот массив заполняется значениями 100 (щиты заряжаются)

Для брони используются запакованные 4-байтовые массивы $hull[id] (исходное количество брони для юнита типа id) и $damage[n] (повреждения), так как броня имеет значения куда больше 1 байта.
При этом вычисления производятся по накопительной системе (изначально каждый юнит имеет 0 повреждений).
*/

function RapidFire ($atyp, $dtyp)
{
    $rapidfire = 0;

    if ( $atyp > 400 ) return 0;

    // ЗСка против ШЗ/ламп
    if ($atyp==214 && ($dtyp==210 || $dtyp==212) && mt_rand(1,10000)>8) $rapidfire = 1;
    // остальной флот против ШЗ/ламп
    else if ($atyp!=210 && ($dtyp==210 || $dtyp==212) && mt_rand(1,100)>20) $rapidfire = 1;
    // ТИ против МТ
    else if ($atyp==205 && $dtyp==202 && mt_rand(1,100)>33) $rapidfire = 1;
    // крейсер против ЛИ
    else if ($atyp==206 && $dtyp==204 && mt_rand(1,1000)>166) $rapidfire = 1;
    // крейсер против РУ
    else if ($atyp==206 && $dtyp==401 && mt_rand(1,100)>10) $rapidfire = 1;
    // бомбер против легкой обороны
    else if ($atyp==211 && ($dtyp==401 || $dtyp==402) && mt_rand(1,100)>20) $rapidfire = 1;
    // бомбер против средней обороны
    else if ($atyp==211 && ($dtyp==403 || $dtyp==405) && mt_rand(1,100)>10) $rapidfire = 1;
    // уник против ЛК
    else if ($atyp==213 && $dtyp==215 && mt_rand(1,100)>50) $rapidfire = 1;
    // уник против ЛЛ
    else if ($atyp==213 && $dtyp==402 && mt_rand(1,100)>10) $rapidfire = 1;
    // ЛК против транспорта
    else if ($atyp==215 && ($dtyp==202 || $dtyp==203) && mt_rand(1,100)>20) $rapidfire = 1;
    // ЛК против среднего флота
    else if ($atyp==215 && ($dtyp==205 || $dtyp==206) && mt_rand(1,100)>25) $rapidfire = 1;
    // ЛК против линкоров
    else if ($atyp==215 && $dtyp==207 && mt_rand(1,1000)>143) $rapidfire = 1;
    // ЗС против гражданского флота
    else if ($atyp==214 && ($dtyp==202 || $dtyp==203 || $dtyp==208 || $dtyp==209) && mt_rand(1,1000)>4) $rapidfire = 1;
    // ЗС против ЛИ
    else if ($atyp==214 && $dtyp==204 && mt_rand(1,1000)>5) $rapidfire = 1;
    // ЗС против ТИ
    else if ($atyp==214 && $dtyp==205 && mt_rand(1,1000)>10) $rapidfire = 1;
    // ЗС против крейсеров
    else if ($atyp==214 && $dtyp==206 && mt_rand(1,1000)>30) $rapidfire = 1;
    // ЗС против линкоров
    else if ($atyp==214 && $dtyp==207 && mt_rand(1,1000)>33) $rapidfire = 1;
    // ЗС против бомберов
    else if ($atyp==214 && $dtyp==211 && mt_rand(1,1000)>40) $rapidfire = 1;
    // ЗС против уников
    else if ($atyp==214 && $dtyp==213 && mt_rand(1,1000)>200) $rapidfire = 1;
    // ЗС против линеек
    else if ($atyp==214 && $dtyp==215 && mt_rand(1,1000)>66) $rapidfire = 1;
    // ЗС против легкой обороны
    else if ($atyp==214 && ($dtyp==401 || $dtyp==402) && mt_rand(1,1000)>5) $rapidfire = 1;
    // ЗС против средней обороны
    else if ($atyp==214 && ($dtyp==403 || $dtyp==405) && mt_rand(1,1000)>10) $rapidfire = 1;
    // ЗС против тяжелой обороны
    else if ($atyp==214 && $dtyp==404 && mt_rand(1,1000)>20) $rapidfire = 1;

    return $rapidfire;
}

// На выходе массив battleresult, формат аналогичный формату боевого движка на Си.
function BattleEngine ($source)
{
    $res = array ();

    $a = array ();
    $d = array ();


    return $res;
}

// DEBUG

$source = "Rapidfire = 1
FID = 70
DID = 0
Attackers = 14
Defenders = 1
Attacker0 = (<OtellO> 252298 1 2 10 13 13 13 0 0 0 0 0 0 0 0 0 0 0 0 0 4613 )
Attacker1 = (<Voskreshaya> 252302 1 6 9 13 11 14 5490 0 16379 0 0 123 0 0 0 0 0 367 0 0 )
Attacker2 = (<r2r> 252312 1 15 6 14 13 15 2055 0 0 0 0 0 0 0 0 0 0 0 0 0 )
Attacker3 = (<onelife> 252310 1 4 7 14 14 15 0 0 0 0 0 0 0 0 0 0 0 0 0 3100 )
Attacker4 = (<Voskreshaya> 252301 1 6 9 13 11 14 0 0 0 0 5020 0 0 0 0 0 0 0 0 0 )
Attacker5 = (<r2r> 252307 1 15 6 14 13 15 0 0 0 0 778 0 0 0 0 0 0 0 0 0 )
Attacker6 = (<onelife> 252309 1 4 7 14 14 15 0 0 0 0 2755 0 0 0 0 0 0 0 0 0 )
Attacker7 = (<r2r> 252305 1 15 6 14 13 15 0 0 6527 0 0 0 0 0 0 0 0 1422 0 0 )
Attacker8 = (<onelife> 252250 1 4 7 14 14 15 0 1 0 0 0 0 0 0 0 0 0 0 0 0 )
Attacker9 = (<Voskreshaya> 252300 1 6 9 13 11 14 0 0 0 0 0 0 0 0 0 0 0 0 0 1341 )
Attacker10 = (<onelife> 252308 1 4 7 14 14 15 0 0 7000 0 0 0 0 0 0 0 0 1400 0 0 )
Attacker11 = (<OtellO> 252351 1 2 10 13 13 13 0 0 0 0 4342 0 0 0 0 0 0 0 0 0 )
Attacker12 = (<onelife> 252311 1 4 7 14 14 15 2510 0 0 0 0 0 0 0 0 0 0 0 0 0 )
Attacker13 = (<r2r> 252306 1 15 6 14 13 15 0 0 0 0 0 0 0 0 0 0 0 0 0 848 )
Defender0 = (<ilk> 10336 1 14 5 14 15 15 956 927 12394 657 1268 1045 3 1587 23 14 0 898 1 2108 92 0 0 0 0 0 0 0 )
";

$res = BattleEngine ( $source );
print_r ( $res );

?>